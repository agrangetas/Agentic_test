services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15
    container_name: agent_postgres
    environment:
      POSTGRES_DB: agent_company_db
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agent_company_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: agent_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application principale
  app:
    build: .
    container_name: agent_app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/agent_company_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    ports:
      - "8022:8000"
    command: python main.py

  # Jupyter Lab pour développement et tests
  jupyter:
    build: .
    container_name: agent_jupyter
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/agent_company_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=INFO
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=agent_token_2024
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./notebooks:/app/notebooks
      - ./test_scripts:/app/test_scripts
    ports:
      - "8888:8888"
    working_dir: /app
    command: >
      bash -c "
        mkdir -p /app/notebooks /app/test_scripts &&
        cp test_logging.py /app/test_scripts/ 2>/dev/null || true &&
        cp main.py /app/test_scripts/ 2>/dev/null || true &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='agent_token_2024'
      "

  # Worker Celery pour tâches lourdes (désactivé temporairement - Phase 2)
  # celery_worker:
  #   build: .
  #   container_name: agent_celery_worker
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     - DATABASE_URL=postgresql://agent_user:agent_password@postgres:5432/agent_company_db
  #     - REDIS_URL=redis://redis:6379/0
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - LOG_LEVEL=INFO
  #   volumes:
  #     - ./config:/app/config
  #     - ./logs:/app/logs
  #   command: celery -A orchestrator.queue_manager worker --loglevel=info --concurrency=4

  # Monitoring Celery (désactivé temporairement - Phase 2)
  # flower:
  #   build: .
  #   container_name: agent_flower
  #   depends_on:
  #     - redis
  #     - celery_worker
  #   environment:
  #     - REDIS_URL=redis://redis:6379/0
  #   ports:
  #     - "5555:5555"
  #   command: celery -A orchestrator.queue_manager flower --host=0.0.0.0 --port=5555

volumes:
  postgres_data:
  redis_data: 