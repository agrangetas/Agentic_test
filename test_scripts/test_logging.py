#!/usr/bin/env python3
"""
Script de test pour le syst√®me de logging avanc√©.

Teste tous les niveaux de logs, la rotation, et les logs par agent.
"""

import asyncio
import sys
import time
from pathlib import Path

# Ajout du r√©pertoire du projet au path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from orchestrator.logging_config import setup_logging, get_agent_logger, get_log_stats
from orchestrator.core import OrchestrationEngine, TaskContext
from agents.agent_normalization import AgentNormalization
from agents.agent_identification import AgentIdentification
from agents.agent_validation import AgentValidation
from loguru import logger


async def test_logging_system():
    """Test complet du syst√®me de logging."""
    
    print("üß™ D√©marrage des tests du syst√®me de logging...\n")
    
    # 1. Configuration du logging
    print("1Ô∏è‚É£ Configuration du syst√®me de logging...")
    setup_logging()
    print("   ‚úÖ Logging configur√©\n")
    
    # 2. Test des logs g√©n√©raux
    print("2Ô∏è‚É£ Test des logs g√©n√©raux...")
    logger.info("Test message INFO", extra={"test_type": "general", "event_type": "test_info"})
    logger.warning("Test message WARNING", extra={"test_type": "general", "event_type": "test_warning"})
    logger.error("Test message ERROR", extra={"test_type": "general", "event_type": "test_error"})
    logger.debug("Test message DEBUG", extra={"test_type": "general", "event_type": "test_debug"})
    print("   ‚úÖ Logs g√©n√©raux test√©s\n")
    
    # 3. Test des logs par agent
    print("3Ô∏è‚É£ Test des logs par agent...")
    
    # Test agent Normalization
    norm_logger = get_agent_logger("normalization", "test-session-001")
    norm_logger.info("Test normalization agent", extra={"test_data": "LVMH"})
    norm_logger.debug("Normalization debug message", extra={"function": "test_normalize"})
    
    # Test agent Identification
    id_logger = get_agent_logger("identification", "test-session-001")
    id_logger.info("Test identification agent", extra={"siren": "775670417"})
    id_logger.debug("Identification debug message", extra={"function": "test_identify"})
    
    # Test agent Validation
    val_logger = get_agent_logger("validation", "test-session-001")
    val_logger.info("Test validation agent", extra={"conflicts": 2})
    val_logger.warning("Validation warning", extra={"conflict_type": "siren_mismatch"})
    
    print("   ‚úÖ Logs par agent test√©s\n")
    
    # 4. Test des agents avec contexte r√©el
    print("4Ô∏è‚É£ Test des agents avec contexte de session...")
    
    # Cr√©ation d'un contexte de test
    context = TaskContext(
        session_id="test-session-002",
        enterprise_name="LVMH",
        current_depth=0,
        max_depth=2,
        config={"test_mode": True}
    )
    
    # Test agent Normalization
    print("   üîÑ Test AgentNormalization...")
    norm_agent = AgentNormalization({"test_mode": True})
    norm_result = await norm_agent.execute(context)
    print(f"      ‚úÖ Normalization: success={norm_result.success}, confidence={norm_result.confidence_score:.2f}")
    
    # Test agent Identification
    print("   üîÑ Test AgentIdentification...")
    id_agent = AgentIdentification({"test_mode": True})
    id_result = await id_agent.execute(context)
    print(f"      ‚úÖ Identification: success={id_result.success}, confidence={id_result.confidence_score:.2f}")
    
    # Test agent Validation
    print("   üîÑ Test AgentValidation...")
    val_agent = AgentValidation({"test_mode": True})
    val_result = await val_agent.execute(context)
    print(f"      ‚úÖ Validation: success={val_result.success}, confidence={val_result.confidence_score:.2f}")
    
    print("   ‚úÖ Tous les agents test√©s\n")
    
    # 5. Test de performance et volume
    print("5Ô∏è‚É£ Test de performance et volume...")
    start_time = time.time()
    
    # G√©n√©ration de logs en volume
    for i in range(100):
        logger.debug(f"Volume test message {i}", extra={
            "iteration": i,
            "test_type": "volume",
            "event_type": "volume_test"
        })
        
        if i % 10 == 0:
            test_logger = get_agent_logger("volume_test", f"session-{i}")
            test_logger.info(f"Volume test for agent {i}", extra={
                "iteration": i,
                "batch": i // 10
            })
    
    volume_time = time.time() - start_time
    print(f"   ‚úÖ 100 messages g√©n√©r√©s en {volume_time:.3f}s\n")
    
    # 6. Test des m√©triques et statistiques
    print("6Ô∏è‚É£ Test des m√©triques et statistiques...")
    
    # Logs de m√©triques
    logger.info("üìä Cache hit rate: 85.2%", extra={
        "metric_name": "cache_hit_rate",
        "metric_value": 85.2,
        "metric_unit": "%",
        "event_type": "performance_metric"
    })
    
    logger.info("‚è±Ô∏è Average response time: 1.234s", extra={
        "metric_name": "avg_response_time",
        "metric_value": 1.234,
        "metric_unit": "s",
        "event_type": "performance_metric"
    })
    
    # Statistiques des logs
    log_stats = get_log_stats()
    print(f"   üìä Statistiques des logs:")
    print(f"      - R√©pertoire: {log_stats['logs_directory']}")
    print(f"      - Fichiers de log: {log_stats['total_log_files']}")
    print(f"      - Taille totale: {log_stats['total_size_mb']} MB")
    print(f"      - Agents avec logs: {', '.join(log_stats['agents_with_logs'])}")
    
    print("   ‚úÖ M√©triques test√©es\n")
    
    # 7. Test des √©v√©nements de session
    print("7Ô∏è‚É£ Test des √©v√©nements de session...")
    
    session_id = "test-session-events"
    logger.info(f"üéØ Session {session_id}: started", extra={
        "session_id": session_id,
        "session_event": "started",
        "session_details": {"enterprise": "Test Corp", "depth": 1},
        "event_type": "session_event"
    })
    
    logger.info(f"üéØ Session {session_id}: agent_completed", extra={
        "session_id": session_id,
        "session_event": "agent_completed",
        "session_details": {"agent": "normalization", "success": True},
        "event_type": "session_event"
    })
    
    logger.info(f"üéØ Session {session_id}: completed", extra={
        "session_id": session_id,
        "session_event": "completed",
        "session_details": {"total_time": 5.67, "agents_run": 3},
        "event_type": "session_event"
    })
    
    print("   ‚úÖ √âv√©nements de session test√©s\n")
    
    # 8. Test des logs d'erreur avec contexte
    print("8Ô∏è‚É£ Test des logs d'erreur avec contexte...")
    
    try:
        # Simulation d'une erreur
        raise ValueError("Test error for logging system")
    except Exception as e:
        logger.error("‚ùå Test error occurred", extra={
            "error_type": type(e).__name__,
            "error_message": str(e),
            "error_context": {
                "function": "test_logging_system",
                "test_phase": "error_testing",
                "session_id": "test-session-error"
            },
            "event_type": "error"
        })
    
    print("   ‚úÖ Logs d'erreur test√©s\n")
    
    # 9. R√©sum√© final
    print("9Ô∏è‚É£ R√©sum√© des tests...")
    
    final_stats = get_log_stats()
    print(f"   üìà R√©sultats finaux:")
    print(f"      - Fichiers de log cr√©√©s: {final_stats['total_log_files']}")
    print(f"      - Taille totale: {final_stats['total_size_mb']} MB")
    print(f"      - Agents avec logs: {len(final_stats['agents_with_logs'])}")
    print(f"      - Agents test√©s: {', '.join(final_stats['agents_with_logs'])}")
    
    print("\nüéâ Tous les tests du syst√®me de logging r√©ussis!")
    
    # Instructions pour l'utilisateur
    print(f"\nüìÅ Logs disponibles dans: {final_stats['logs_directory']}")
    print(f"   - Logs g√©n√©raux: app_YYYY-MM-DD.log")
    print(f"   - Logs par agent: agents/AGENT_NAME_YYYY-MM-DD.log")
    print(f"\nüîç Commandes utiles:")
    print(f"   - Voir tous les logs: tail -f logs/app_*.log")
    print(f"   - Voir logs d'un agent: tail -f logs/agents/normalization_*.log")
    print(f"   - Chercher des erreurs: grep 'ERROR' logs/app_*.log")
    print(f"   - Chercher par session: grep 'test-session-001' logs/**/*.log")


async def test_orchestrator_with_logging():
    """Test de l'orchestrateur avec logging complet."""
    print("\nüéØ Test de l'orchestrateur avec logging...")
    
    config = {
        'max_concurrent_tasks': 3,
        'session_timeout_minutes': 5,
        'test_mode': True
    }
    
    orchestrator = OrchestrationEngine(config)
    
    try:
        result = await orchestrator.execute_session(
            enterprise_name="Test Company",
            session_config={
                'max_depth': 1,
                'test_mode': True
            }
        )
        
        print(f"   ‚úÖ Session orchestrateur: {result['session_id']}")
        print(f"      - Statut: {result['status']}")
        print(f"      - Temps: {result.get('execution_time', 0):.3f}s")
        
    except Exception as e:
        print(f"   ‚ùå Erreur orchestrateur: {e}")


async def main():
    """Fonction principale de test."""
    print("üß† Test du Syst√®me de Logging Avanc√©")
    print("=" * 50)
    
    try:
        await test_logging_system()
        await test_orchestrator_with_logging()
        
        print("\n‚úÖ Tous les tests termin√©s avec succ√®s!")
        
    except Exception as e:
        logger.error("Test failed", extra={
            "error": str(e),
            "error_type": type(e).__name__,
            "event_type": "test_failure"
        })
        print(f"\n‚ùå √âchec des tests: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main()) 